/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* dynports =  1  *)
(* top =  1  *)
(* src = "top.v:2" *)
module top(clk, rst, inst, pc);
  (* src = "top.v:4" *)
  input clk;
  (* src = "top.v:26" *)
  wire [11:0] csr_raddr;
  (* src = "top.v:27" *)
  wire [31:0] csr_rdata;
  (* src = "top.v:28" *)
  wire [11:0] csr_waddr;
  (* src = "top.v:29" *)
  wire [11:0] csr_waddr2;
  (* src = "top.v:30" *)
  wire [31:0] csr_wdata;
  (* src = "top.v:31" *)
  wire [31:0] csr_wdata2;
  (* src = "top.v:52" *)
  wire [31:0] dsram_araddr;
  (* src = "top.v:54" *)
  wire dsram_arready;
  (* src = "top.v:53" *)
  wire dsram_arvalid;
  (* src = "top.v:39" *)
  wire [31:0] dsram_awaddr;
  (* src = "top.v:41" *)
  wire dsram_awready;
  (* src = "top.v:40" *)
  wire dsram_awvalid;
  (* src = "top.v:50" *)
  wire dsram_bready;
  (* src = "top.v:48" *)
  wire [1:0] dsram_bresp;
  (* src = "top.v:49" *)
  wire dsram_bvalid;
  (* src = "top.v:56" *)
  wire [31:0] dsram_rdata;
  (* src = "top.v:59" *)
  wire dsram_rready;
  (* src = "top.v:57" *)
  wire [1:0] dsram_rresp;
  (* src = "top.v:58" *)
  wire dsram_rvalid;
  (* src = "top.v:43" *)
  wire [31:0] dsram_wdata;
  (* src = "top.v:46" *)
  wire dsram_wready;
  (* src = "top.v:44" *)
  wire [2:0] dsram_wstrb;
  (* src = "top.v:45" *)
  wire dsram_wvalid;
  (* src = "top.v:19" *)
  wire exu_allowin;
  (* src = "top.v:11" *)
  wire [32:0] exu_to_ifu_bus;
  (* src = "top.v:12" *)
  wire exu_to_ifu_valid;
  (* src = "top.v:17" *)
  wire idu_allowin;
  (* src = "top.v:33" *)
  wire [86:0] idu_to_exu_alu_bus;
  (* src = "top.v:34" *)
  wire [140:0] idu_to_exu_bus;
  (* src = "top.v:35" *)
  wire [47:0] idu_to_exu_csr_bus;
  (* src = "top.v:37" *)
  wire idu_to_exu_valid;
  (* src = "top.v:70" *)
  wire idu_valid;
  (* src = "top.v:18" *)
  wire ifu_allowin;
  (* src = "top.v:13" *)
  wire [63:0] ifu_to_idu_bus;
  (* src = "top.v:15" *)
  wire ifu_to_idu_valid;
  (* src = "top.v:7" *)
  output [31:0] inst;
  (* src = "top.v:61" *)
  wire [31:0] isram_araddr;
  (* src = "top.v:63" *)
  wire isram_arready;
  (* src = "top.v:62" *)
  wire isram_arvalid;
  (* src = "top.v:65" *)
  wire [31:0] isram_rdata;
  (* src = "top.v:68" *)
  wire isram_rready;
  (* src = "top.v:66" *)
  wire [1:0] isram_rresp;
  (* src = "top.v:67" *)
  wire isram_rvalid;
  (* src = "top.v:8" *)
  output [31:0] pc;
  (* src = "top.v:23" *)
  wire [4:0] regfile_waddr;
  (* src = "top.v:22" *)
  wire [31:0] regfile_wdata;
  (* src = "top.v:24" *)
  wire regfile_wen;
  (* src = "top.v:5" *)
  input rst;
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:85" *)
  ysyx_23060208_CSR #(
    .DATA_WIDTH(32'sd32),
    .REG_WIDTH(32'sd5)
  ) csr (
    .clk(clk),
    .csr_raddr(csr_raddr),
    .csr_rdata(csr_rdata),
    .csr_waddr(csr_waddr),
    .csr_waddr2(csr_waddr2),
    .csr_wdata(csr_wdata),
    .csr_wdata2(csr_wdata2),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:196" *)
  ysyx_23060208_dsram #(
    .DATA_WIDTH(32'sd32)
  ) dsram (
    .clk(clk),
    .dsram_araddr(dsram_araddr),
    .dsram_arready(dsram_arready),
    .dsram_arvalid(dsram_arvalid),
    .dsram_awaddr(dsram_awaddr),
    .dsram_awready(dsram_awready),
    .dsram_awvalid(dsram_awvalid),
    .dsram_bready(dsram_bready),
    .dsram_bresp(dsram_bresp),
    .dsram_bvalid(dsram_bvalid),
    .dsram_rdata(dsram_rdata),
    .dsram_rready(dsram_rready),
    .dsram_rresp(dsram_rresp),
    .dsram_rvalid(dsram_rvalid),
    .dsram_wdata(dsram_wdata),
    .dsram_wready(dsram_wready),
    .dsram_wstrb(dsram_wstrb),
    .dsram_wvalid(dsram_wvalid),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:147" *)
  ysyx_23060208_EXU #(
    .DATA_WIDTH(32'sd32),
    .REG_WIDTH(32'sd5)
  ) exu (
    .clk(clk),
    .csr_waddr(csr_waddr),
    .csr_waddr2(csr_waddr2),
    .csr_wdata(csr_wdata),
    .csr_wdata2(csr_wdata2),
    .dsram_araddr(dsram_araddr),
    .dsram_arready(dsram_arready),
    .dsram_arvalid(dsram_arvalid),
    .dsram_awaddr(dsram_awaddr),
    .dsram_awready(dsram_awready),
    .dsram_awvalid(dsram_awvalid),
    .dsram_bready(dsram_bready),
    .dsram_bresp(dsram_bresp),
    .dsram_bvalid(dsram_bvalid),
    .dsram_rdata(dsram_rdata),
    .dsram_rready(dsram_rready),
    .dsram_rresp(dsram_rresp),
    .dsram_rvalid(dsram_rvalid),
    .dsram_wdata(dsram_wdata),
    .dsram_wready(dsram_wready),
    .dsram_wstrb(dsram_wstrb),
    .dsram_wvalid(dsram_wvalid),
    .exu_allowin(exu_allowin),
    .exu_inst(inst),
    .exu_pc(pc),
    .exu_to_ifu_bus(exu_to_ifu_bus),
    .exu_to_ifu_valid(exu_to_ifu_valid),
    .idu_to_exu_alu_bus(idu_to_exu_alu_bus),
    .idu_to_exu_bus(idu_to_exu_bus),
    .idu_to_exu_csr_bus(idu_to_exu_csr_bus),
    .idu_to_exu_valid(idu_to_exu_valid),
    .regfile_waddr(regfile_waddr),
    .regfile_wdata(regfile_wdata),
    .regfile_wen(regfile_wen),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:123" *)
  ysyx_23060208_IDU #(
    .DATA_WIDTH(32'sd32),
    .REG_WIDTH(32'sd5)
  ) idu (
    .clk(clk),
    .csr_raddr(csr_raddr),
    .csr_rdata(csr_rdata),
    .exu_allowin(exu_allowin),
    .idu_allowin(idu_allowin),
    .idu_to_exu_alu_bus(idu_to_exu_alu_bus),
    .idu_to_exu_bus(idu_to_exu_bus),
    .idu_to_exu_csr_bus(idu_to_exu_csr_bus),
    .idu_to_exu_valid(idu_to_exu_valid),
    .idu_valid_o(idu_valid),
    .ifu_to_idu_bus(ifu_to_idu_bus),
    .ifu_to_idu_valid(ifu_to_idu_valid),
    .regfile_waddr(regfile_waddr),
    .regfile_wdata(regfile_wdata),
    .regfile_wen(regfile_wen),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:98" *)
  ysyx_23060208_IFU #(
    .DATA_WIDTH(32'sd32)
  ) ifu (
    .clk(clk),
    .exu_allowin(exu_allowin),
    .exu_to_ifu_bus(exu_to_ifu_bus),
    .exu_to_ifu_valid(exu_to_ifu_valid),
    .idu_valid(idu_valid),
    .ifu_allowin(ifu_allowin),
    .ifu_to_idu_bus(ifu_to_idu_bus),
    .ifu_to_idu_valid(ifu_to_idu_valid),
    .isram_araddr(isram_araddr),
    .isram_arready(isram_arready),
    .isram_arvalid(isram_arvalid),
    .isram_rdata(isram_rdata),
    .isram_rready(isram_rready),
    .isram_rresp(isram_rresp),
    .isram_rvalid(isram_rvalid),
    .rst(rst)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "top.v:72" *)
  ysyx_23060208_isram #(
    .DATA_WIDTH(32'sd32)
  ) isram (
    .clk(clk),
    .ifu_allowin(ifu_allowin),
    .isram_araddr(isram_araddr),
    .isram_arready(isram_arready),
    .isram_arvalid(isram_arvalid),
    .isram_rdata(isram_rdata),
    .isram_rready(isram_rready),
    .isram_rresp(isram_rresp),
    .isram_rvalid(isram_rvalid),
    .rst(rst)
  );
endmodule
